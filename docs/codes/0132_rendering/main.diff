diff --git a/src/main.cpp b/src/main.cpp
index 74af236..2b0dcd3 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -64,6 +64,9 @@ private:
     std::vector<vk::raii::Framebuffer> m_swapChainFramebuffers;
     vk::raii::CommandPool m_commandPool{ nullptr };
     std::vector<vk::raii::CommandBuffer> m_commandBuffers;
+    vk::raii::Semaphore m_imageAvailableSemaphore{ nullptr };
+    vk::raii::Semaphore m_renderFinishedSemaphore{ nullptr };
+    vk::raii::Fence m_inFlightFence{ nullptr };
     /////////////////////////////////////////////////////////////////
 
     /////////////////////////////////////////////////////////////////
@@ -90,12 +93,16 @@ private:
         createFramebuffers();
         createCommandPool();
         createCommandBuffer();
+        createSyncObjects();
     }
 
     void mainLoop() {
         while (!glfwWindowShouldClose( m_window )) {
             glfwPollEvents();
+            drawFrame();
         }
+        
+        m_device.waitIdle();
     }
 
     void cleanup() {
@@ -462,6 +469,16 @@ private:
         renderPassInfo.setAttachments( colorAttachment );
         renderPassInfo.setSubpasses( subpass );
 
+        vk::SubpassDependency dependency;
+        dependency.srcSubpass = VK_SUBPASS_EXTERNAL;
+        dependency.dstSubpass = 0;
+        dependency.srcStageMask = vk::PipelineStageFlagBits::eColorAttachmentOutput;
+        dependency.srcAccessMask = {};
+        dependency.dstStageMask = vk::PipelineStageFlagBits::eColorAttachmentOutput;
+        dependency.dstAccessMask = vk::AccessFlagBits::eColorAttachmentWrite;
+
+        renderPassInfo.setDependencies( dependency );
+
         m_renderPass = m_device.createRenderPass(renderPassInfo);
     }
     /////////////////////////////////////////////////////////////////
@@ -653,6 +670,54 @@ private:
         commandBuffer.end();
     }
     /////////////////////////////////////////////////////////////////
+
+    /////////////////////////////////////////////////////////////////
+    /// render and present
+    void createSyncObjects() {
+        vk::SemaphoreCreateInfo semaphoreInfo;
+        vk::FenceCreateInfo fenceInfo(
+            vk::FenceCreateFlagBits::eSignaled  // flags
+        );
+
+        m_imageAvailableSemaphore = m_device.createSemaphore( semaphoreInfo );
+        m_renderFinishedSemaphore = m_device.createSemaphore( semaphoreInfo );
+        m_inFlightFence = m_device.createFence( fenceInfo );
+    }
+    void drawFrame() {
+        if( auto res = m_device.waitForFences( *m_inFlightFence, true, UINT64_MAX );
+            res != vk::Result::eSuccess ){
+            throw std::runtime_error{ "waitForFences in drawFrame was failed" };
+        }
+
+        m_device.resetFences( *m_inFlightFence );
+
+        auto [nxtRes, imageIndex] = m_swapChain.acquireNextImage(UINT64_MAX, m_imageAvailableSemaphore);
+
+        m_commandBuffers[0].reset();
+        recordCommandBuffer(m_commandBuffers[0], imageIndex);
+
+        vk::SubmitInfo submitInfo;
+
+        submitInfo.setWaitSemaphores( *m_imageAvailableSemaphore );
+        std::array<vk::PipelineStageFlags,1> waitStages = { vk::PipelineStageFlagBits::eColorAttachmentOutput };
+        submitInfo.setWaitDstStageMask( waitStages );
+
+        submitInfo.setCommandBuffers( *m_commandBuffers[0] );
+        submitInfo.setSignalSemaphores( *m_renderFinishedSemaphore );
+
+        m_graphicsQueue.submit(submitInfo, m_inFlightFence);
+
+        vk::PresentInfoKHR presentInfo;
+        presentInfo.setWaitSemaphores( *m_renderFinishedSemaphore );
+        presentInfo.setSwapchains( *m_swapChain );
+        presentInfo.pImageIndices = &imageIndex;
+
+        if( auto res = m_presentQueue.presentKHR( presentInfo );
+            res != vk::Result::eSuccess) {
+            throw std::runtime_error{ "presentKHR in drawFrame was failed" };
+        }
+    }
+    /////////////////////////////////////////////////////////////////
 };
 
 int main() {
