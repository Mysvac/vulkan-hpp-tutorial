diff --git a/src/main.cpp b/src/main.cpp
index 28b69ae..334c6ed 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -26,8 +26,12 @@ private:
     /////////////////////////////////////////////////////////////////
     /// class member
     GLFWwindow* m_window{ nullptr };
+    vk::raii::Context m_context;
+    vk::raii::Instance m_instance{ nullptr };
     /////////////////////////////////////////////////////////////////
 
+    /////////////////////////////////////////////////////////////////
+    /// run()
     void initWindow() {
         glfwInit();
 
@@ -38,7 +42,7 @@ private:
     }
 
     void initVulkan() {
-
+        createInstance();
     }
 
     void mainLoop() {
@@ -51,8 +55,44 @@ private:
         glfwDestroyWindow( m_window );
         glfwTerminate();
     }
+    /////////////////////////////////////////////////////////////////
+
+    /////////////////////////////////////////////////////////////////
+    /// instance creation
+    void createInstance(){
+        vk::ApplicationInfo applicationInfo( 
+            "Hello Triangle",   // pApplicationName
+            1,                  // applicationVersion
+            "No Engine",        // pEngineName
+            1,                  // engineVersion
+            VK_API_VERSION_1_4  // apiVersion
+        );
+        
+        vk::InstanceCreateInfo createInfo( 
+            {},                 // vk::InstanceCreateFlags
+            &applicationInfo    // vk::ApplicationInfo*
+        );
+
+        uint32_t glfwExtensionCount = 0;
+        const char** glfwExtensions;
+        glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount);
+        std::vector<const char*> requiredExtensions( glfwExtensions, glfwExtensions + glfwExtensionCount );
+
+        requiredExtensions.emplace_back(VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME);
 
-    
+        createInfo.setPEnabledExtensionNames( requiredExtensions );
+        createInfo.flags |= vk::InstanceCreateFlagBits::eEnumeratePortabilityKHR;
+
+        auto extensions = m_context.enumerateInstanceExtensionProperties();
+        std::cout << "available extensions:\n";
+
+        for (const auto& extension : extensions) {
+            std::cout << '\t' << extension.extensionName << std::endl;
+        }
+
+        m_instance = m_context.createInstance( createInfo );
+    }
+    /////////////////////////////////////////////////////////////////
 };
 
 int main() {
