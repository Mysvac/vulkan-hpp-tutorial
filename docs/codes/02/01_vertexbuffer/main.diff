diff --git a/src/main.cpp b/src/main.cpp
index 592d73a..5ef4ecf 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -56,6 +56,8 @@ private:
     vk::raii::Device m_device{ nullptr };
     vk::raii::Queue m_graphicsQueue{ nullptr };
     vk::raii::Queue m_presentQueue{ nullptr };
+    vk::raii::DeviceMemory m_vertexBufferMemory{ nullptr };
+    vk::raii::Buffer m_vertexBuffer{ nullptr };
     vk::raii::SwapchainKHR m_swapChain{ nullptr };
     std::vector<vk::Image> m_swapChainImages;
     vk::Format m_swapChainImageFormat;
@@ -98,6 +100,7 @@ private:
         createGraphicsPipeline();
         createFramebuffers();
         createCommandPool();
+        createVertexBuffer();
         createCommandBuffers();
         createSyncObjects();
     }
@@ -676,7 +679,11 @@ private:
         );
         commandBuffer.setScissor(0, scissor);
 
-        commandBuffer.draw(3, 1, 0, 0);
+        std::array<vk::Buffer,1> vertexBuffers { m_vertexBuffer };
+        std::array<vk::DeviceSize,1> offsets { 0 };
+        commandBuffer.bindVertexBuffers( 0, vertexBuffers, offsets );
+
+        commandBuffer.draw(static_cast<uint32_t>(vertices.size()), 1, 0, 0);
 
         commandBuffer.endRenderPass();
         commandBuffer.end();
@@ -812,13 +819,52 @@ private:
         }
     };
     inline static const std::vector<Vertex> vertices = {
-        {{0.0f, -0.5f}, {1.0f, 0.0f, 0.0f}},
+        {{0.0f, -0.5f}, {1.0f, 1.0f, 1.0f}},
         {{0.5f, 0.5f}, {0.0f, 1.0f, 0.0f}},
         {{-0.5f, 0.5f}, {0.0f, 0.0f, 1.0f}}
     };
     /////////////////////////////////////////////////////////////////
 
+    /////////////////////////////////////////////////////////////////
+    /// create vertex buffer
+    void createVertexBuffer() {
+        vk::BufferCreateInfo bufferInfo;
+        bufferInfo.size = sizeof(vertices[0]) * vertices.size();
+        bufferInfo.usage = vk::BufferUsageFlagBits::eVertexBuffer;
+        bufferInfo.sharingMode = vk::SharingMode::eExclusive;
+
+        m_vertexBuffer = m_device.createBuffer(bufferInfo);
+
+        vk::MemoryRequirements memRequirements = m_vertexBuffer.getMemoryRequirements();
+
+        vk::MemoryAllocateInfo allocInfo;
+        allocInfo.allocationSize = memRequirements.size;
+        allocInfo.memoryTypeIndex = findMemoryType( memRequirements.memoryTypeBits,
+            vk::MemoryPropertyFlagBits::eHostVisible | vk::MemoryPropertyFlagBits::eHostCoherent 
+        );
+
+        m_vertexBufferMemory = m_device.allocateMemory( allocInfo );
+        m_vertexBuffer.bindMemory(m_vertexBufferMemory, 0);
 
+        void* data;
+        data = m_vertexBufferMemory.mapMemory(0, bufferInfo.size);
+        memcpy(data, vertices.data(), static_cast<size_t>(bufferInfo.size));
+        m_vertexBufferMemory.unmapMemory();
+    }
+    uint32_t findMemoryType(uint32_t typeFilter, vk::MemoryPropertyFlags properties) {
+        // vk::PhysicalDeviceMemoryProperties
+        auto memProperties = m_physicalDevice.getMemoryProperties();
+
+        for(uint32_t i = 0; i < memProperties.memoryTypeCount; ++i){
+            if( (typeFilter & (1 << i)) &&
+                (memProperties.memoryTypes[i].propertyFlags & properties ) == properties ) {
+                return i;
+            }
+        }
+        throw std::runtime_error("failed to find suitable memory type!");
+        return 0; // optional
+    }
+    /////////////////////////////////////////////////////////////////
 };
 
 int main() {
