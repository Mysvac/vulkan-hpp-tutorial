diff --git a/src/main.cpp b/src/main.cpp
index e91e70e..b27c341 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -70,17 +70,19 @@ private:
     std::vector<vk::raii::Semaphore> m_renderFinishedSemaphores;
     std::vector<vk::raii::Fence> m_inFlightFences;
     uint32_t m_currentFrame = 0;
+    bool m_framebufferResized = false;
     /////////////////////////////////////////////////////////////////
 
     /////////////////////////////////////////////////////////////////
     /// run()
     void initWindow() {
         glfwInit();
-
+        
         glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
-        glfwWindowHint(GLFW_RESIZABLE, GLFW_FALSE);
 
         m_window = glfwCreateWindow(WIDTH, HEIGHT, "Vulkan", nullptr, nullptr);
+        glfwSetWindowUserPointer(m_window, this);
+        glfwSetFramebufferSizeCallback(m_window, framebufferResizeCallback);
     }
 
     void initVulkan() {
@@ -694,10 +696,19 @@ private:
             throw std::runtime_error{ "waitForFences in drawFrame was failed" };
         }
 
+        uint32_t imageIndex;
+        try{
+            // std::pair<vk::Result, uint32_t>
+            auto [res, idx] = m_swapChain.acquireNextImage(UINT64_MAX, m_imageAvailableSemaphores[m_currentFrame]);
+            imageIndex = idx;
+        } catch (const vk::OutOfDateKHRError&){
+                recreateSwapChain();
+                return;
+        } // Do not catch other exceptions
+
+        // Only reset the fence if we are submitting work
         m_device.resetFences( *m_inFlightFences[m_currentFrame] );
 
-        auto [nxtRes, imageIndex] = m_swapChain.acquireNextImage(UINT64_MAX, m_imageAvailableSemaphores[m_currentFrame]);
-
         m_commandBuffers[m_currentFrame].reset();
         recordCommandBuffer(m_commandBuffers[m_currentFrame], imageIndex);
 
@@ -717,14 +728,51 @@ private:
         presentInfo.setSwapchains( *m_swapChain );
         presentInfo.pImageIndices = &imageIndex;
 
-        if( auto res = m_presentQueue.presentKHR( presentInfo );
-            res != vk::Result::eSuccess) {
-            throw std::runtime_error{ "presentKHR in drawFrame was failed" };
+        try{
+            auto res = m_presentQueue.presentKHR(presentInfo);
+            if( res == vk::Result::eSuboptimalKHR ) {
+                recreateSwapChain();
+            }
+        } catch (const vk::OutOfDateKHRError&){
+            recreateSwapChain();
+        } // Do not catch other exceptions
+
+        if( m_framebufferResized ){
+            recreateSwapChain();
         }
 
         m_currentFrame = (m_currentFrame + 1) % MAX_FRAMES_IN_FLIGHT;
     }
     /////////////////////////////////////////////////////////////////
+
+    /////////////////////////////////////////////////////////////////
+    /// recreate swapchain
+    static void framebufferResizeCallback(GLFWwindow* window, int width, int height) {
+        auto app = reinterpret_cast<HelloTriangleApplication*>(glfwGetWindowUserPointer(window));
+        app->m_framebufferResized = true;
+    }
+    void recreateSwapChain() {
+        int width = 0, height = 0;
+        glfwGetFramebufferSize(m_window, &width, &height);
+        while (width == 0 || height == 0) {
+            glfwGetFramebufferSize(m_window, &width, &height);
+            glfwWaitEvents();
+        }
+
+        m_device.waitIdle();
+
+        m_swapChainFramebuffers.clear();
+        m_swapChainImageViews.clear();
+        m_swapChainImages.clear(); // optional
+        m_swapChain = nullptr;
+
+        createSwapChain();
+        createImageViews();
+        createFramebuffers();
+
+        m_framebufferResized = false;
+    }
+    /////////////////////////////////////////////////////////////////
 };
 
 int main() {
