diff --git a/src/main.cpp b/src/main.cpp
index b0d2dfe..a73f3c8 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -47,6 +47,7 @@ private:
 
     inline static const std::string MODEL_PATH = "models/viking_room.obj";
     inline static const std::string TEXTURE_PATH = "textures/viking_room.png";
+    inline static const std::string BUNNY_PATH = "models/bunny.obj";
 
     inline static const std::vector<const char*> validationLayers {
         "VK_LAYER_KHRONOS_validation"
@@ -77,6 +78,7 @@ private:
     vk::raii::Queue m_presentQueue{ nullptr };
     std::vector<Vertex> m_vertices;
     std::vector<uint32_t> m_indices;
+    std::vector<uint32_t> m_indicesOffsets;
     vk::raii::DeviceMemory m_vertexBufferMemory{ nullptr };
     vk::raii::Buffer m_vertexBuffer{ nullptr };
     vk::raii::DeviceMemory m_indexBufferMemory{ nullptr };
@@ -153,7 +155,8 @@ private:
         createTextureImage();
         createTextureImageView();
         createTextureSampler();
-        loadModel();
+        loadModel(MODEL_PATH);
+        loadModel(BUNNY_PATH);
         createVertexBuffer();
         createIndexBuffer();
         createUniformBuffers();
@@ -687,8 +690,18 @@ private:
         depthStencil.depthBoundsTestEnable = false; // Optional
         depthStencil.stencilTestEnable = false; // Optional
 
+        std::array<vk::PushConstantRange, 2> pushConstantRanges;
+        pushConstantRanges[0].stageFlags = vk::ShaderStageFlagBits::eVertex;
+        pushConstantRanges[0].offset = 0;
+        pushConstantRanges[0].size = sizeof(glm::mat4);
+        pushConstantRanges[1].stageFlags = vk::ShaderStageFlagBits::eFragment;
+        pushConstantRanges[1].offset = sizeof(glm::mat4);
+        pushConstantRanges[1].size = sizeof(uint32_t);
+
         vk::PipelineLayoutCreateInfo pipelineLayoutInfo;
         pipelineLayoutInfo.setSetLayouts(*m_descriptorSetLayout);
+        pipelineLayoutInfo.setPushConstantRanges( pushConstantRanges );
+
         m_pipelineLayout = m_device.createPipelineLayout( pipelineLayoutInfo );
 
         vk::GraphicsPipelineCreateInfo pipelineInfo;
@@ -805,7 +818,44 @@ private:
             nullptr
         );
 
-        commandBuffer.drawIndexed(static_cast<uint32_t>(m_indices.size()), 1, 0, 0, 0);
+        for(size_t counter = 1; const uint32_t firstIndex : m_indicesOffsets) {
+            PushConstantData pcData;
+            if(counter == 1) {
+                pcData.model = glm::rotate(
+                    glm::mat4(1.0f), 
+                    glm::radians(-90.0f), 
+                    glm::vec3(1.0f, 0.0f, 0.0f)
+                )  * glm::rotate(
+                    glm::mat4(1.0f), 
+                    glm::radians(-90.0f), 
+                    glm::vec3(0.0f, 0.0f, 1.0f)
+                );
+                pcData.enableTexture = 1;
+            } else {
+                pcData.model = glm::translate(glm::mat4(1.0f), glm::vec3(0.5f, 0.12f, 0.0f));
+                pcData.enableTexture = 0;
+            }
+            commandBuffer.pushConstants<glm::mat4>(
+                m_pipelineLayout,
+                vk::ShaderStageFlagBits::eVertex,
+                0, // offset
+                pcData.model
+            );
+            commandBuffer.pushConstants<uint32_t>(
+                m_pipelineLayout,
+                vk::ShaderStageFlagBits::eFragment,
+                sizeof(glm::mat4), // offset
+                pcData.enableTexture
+            );
+            commandBuffer.drawIndexed(
+                counter == m_indicesOffsets.size() ? m_indices.size() - firstIndex : m_indicesOffsets[counter] - firstIndex,
+                1,
+                firstIndex,
+                0,
+                0
+            );
+            ++counter;
+        }
 
         commandBuffer.endRenderPass();
         commandBuffer.end();
@@ -1069,7 +1119,6 @@ private:
     /////////////////////////////////////////////////////////////////
     /// descriptor layout and buffer
     struct alignas(16) UniformBufferObject {
-        glm::mat4 model;
         glm::mat4 view;
         glm::mat4 proj;
     };
@@ -1124,16 +1173,6 @@ private:
         front = glm::normalize(front);
 
         UniformBufferObject ubo{};
-        ubo.model = glm::rotate(
-            glm::mat4(1.0f), 
-            glm::radians(-90.0f), 
-            glm::vec3(1.0f, 0.0f, 0.0f)
-        );
-        ubo.model *= glm::rotate(
-            glm::mat4(1.0f), 
-            glm::radians(-90.0f), 
-            glm::vec3(0.0f, 0.0f, 1.0f)
-        );
         ubo.view = glm::lookAt(
             m_cameraPos, 
             m_cameraPos + front, 
@@ -1573,17 +1612,19 @@ private:
 
     /////////////////////////////////////////////////////////////////
     /// load model
-    void loadModel() {
+    void loadModel(const std::string& model_path) {
         tinyobj::attrib_t attrib;
         std::vector<tinyobj::shape_t> shapes;
         std::vector<tinyobj::material_t> materials;
         std::string warn, err;
 
-        if (!tinyobj::LoadObj(&attrib, &shapes, &materials, &warn, &err, MODEL_PATH.c_str())) {
+        if (!tinyobj::LoadObj(&attrib, &shapes, &materials, &warn, &err, model_path.c_str())) {
             throw std::runtime_error(warn + err);
         }
+
+        m_indicesOffsets.push_back(m_indices.size());
         
-        std::unordered_map<
+        static std::unordered_map<
             Vertex, 
             uint32_t,
             decltype( [](const Vertex& vertex) -> size_t {
@@ -1605,10 +1646,12 @@ private:
                     attrib.vertices[3 * index.vertex_index + 2]
                 };
 
-                vertex.texCoord = {
-                    attrib.texcoords[2 * index.texcoord_index + 0],
-                    1.0f - attrib.texcoords[2 * index.texcoord_index + 1]
-                };
+                if (!attrib.texcoords.empty() && index.texcoord_index >= 0) {
+                    vertex.texCoord = {
+                        attrib.texcoords[2 * index.texcoord_index],
+                        1.0f - attrib.texcoords[2 * index.texcoord_index + 1]
+                    };
+                }
 
                 vertex.color = {1.0f, 1.0f, 1.0f};
 
@@ -1821,6 +1864,14 @@ private:
         );
     }
     /////////////////////////////////////////////////////////////////
+
+    /////////////////////////////////////////////////////////////////
+    /// push constant
+    struct PushConstantData {
+        glm::mat4 model;
+        uint32_t enableTexture;
+    };
+    /////////////////////////////////////////////////////////////////
 };
 
 
