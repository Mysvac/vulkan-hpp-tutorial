diff --git a/src/main.cpp b/src/main.cpp
index 16742b9..92acd15 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -120,6 +120,7 @@ private:
     vk::raii::DescriptorPool m_descriptorPool{ nullptr };
     std::vector<vk::raii::DescriptorSet> m_descriptorSets;
     vk::raii::PipelineLayout m_pipelineLayout{ nullptr };
+    vk::raii::PipelineCache m_pipelineCache{ nullptr };
     vk::raii::Pipeline m_graphicsPipeline{ nullptr };
     std::vector<vk::raii::Framebuffer> m_swapChainFramebuffers;
     vk::raii::CommandPool m_commandPool{ nullptr };
@@ -159,7 +160,9 @@ private:
         createImageViews();
         createRenderPass();
         createDescriptorSetLayout();
+        createPipelineCache();
         createGraphicsPipeline();
+        savePipelineCache();
         createCommandPool();
         createColorResources();
         createDepthResources();
@@ -762,7 +765,7 @@ private:
         pipelineInfo.basePipelineHandle = nullptr; // Optional
         pipelineInfo.basePipelineIndex = -1; // Optional
 
-        m_graphicsPipeline = m_device.createGraphicsPipeline( nullptr, pipelineInfo );
+        m_graphicsPipeline = m_device.createGraphicsPipeline( m_pipelineCache, pipelineInfo );
     }
     /////////////////////////////////////////////////////////////////
 
@@ -2118,6 +2121,29 @@ private:
         );
     }
     /////////////////////////////////////////////////////////////////
+
+    /////////////////////////////////////////////////////////////////
+    /// pipeline cache
+    void createPipelineCache() {
+        vk::PipelineCacheCreateInfo pipelineCacheInfo;
+        std::vector<char> data;
+        std::ifstream in("pipeline_cache.bin", std::ios::binary | std::ios::ate);
+        if (in) {
+            size_t size = in.tellg();
+            in.seekg(0);
+            data.resize(size);
+            in.read(data.data(), size);
+            pipelineCacheInfo.setInitialData<char>(data);
+        }
+        m_pipelineCache = m_device.createPipelineCache(pipelineCacheInfo);
+    }
+    void savePipelineCache() {
+        // std::vector<uint8_t>
+        auto cacheData = m_pipelineCache.getData();
+        std::ofstream out("pipeline_cache.bin", std::ios::binary);
+        out.write(reinterpret_cast<const char*>(cacheData.data()), cacheData.size());
+    }
+    /////////////////////////////////////////////////////////////////
 };
 
 
